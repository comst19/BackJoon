package Gold;

import java.io.*;
import java.util.*;

class Time implements Comparable<Time>{
	int start, end;
	public Time(int start, int end) {
		this.start = start;
		this.end = end;
	}
	@Override
	public int compareTo(Time o) {
		// TODO Auto-generated method stub
		return this.start - o.start;
	}
	
}

class Seat implements Comparable<Seat>{
	int end, idx;
	public Seat(int end, int idx) {
		this.end = end;
		this.idx = idx;
	}
	@Override
	public int compareTo(Seat o) {
		// TODO Auto-generated method stub
		if(this.end == o.end) return this.idx - o.idx; 
		return this.end - o.end;
	}
}

public class G3_12764 {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer sT = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(sT.nextToken());

        Time[] times = new Time[n];
        for (int i = 0; i < n; i++) {
            sT = new StringTokenizer(br.readLine());
            int st = Integer.parseInt(sT.nextToken());
            int et = Integer.parseInt(sT.nextToken());
            times[i] = new Time(st,et);
        }

        PriorityQueue<Seat> seats = new PriorityQueue<>();
        int[] ch = new int[n];
        Arrays.sort(times);
        
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            Time t = times[i];
            if (seats.isEmpty()) {
                seats.add(new Seat(t.end, cnt));
                ch[cnt]++;
                cnt++;
            } else {
                while (!seats.isEmpty() && seats.peek().end <= t.start) {
                    seats.poll();
                }
                if (seats.isEmpty()) {
                    seats.add(new Seat(t.end, cnt));
                    ch[cnt]++;
                    cnt++;
                } else {
                    Seat s = seats.peek();
                    ch[s.idx]++;
                    seats.poll();
                    seats.add(new Seat(t.end, s.idx));
                }
            }
        }

        StringBuilder sb = new StringBuilder();
        sb.append(cnt).append("\n");
        for (int i = 0; i < cnt; i++) {
            sb.append(ch[i]).append(" ");
        }
        System.out.print(sb);
    }
}