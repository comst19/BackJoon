package Silver;

import java.io.*;
import java.util.*;

class Task implements Comparable<Task>{
	int start, end;
	public Task(int start, int end) {
		this.start = start;
		this.end = end;
	}
	@Override
	public int compareTo(Task o) {
		// TODO Auto-generated method stub
		if(o.end == this.end) return o.start - this.start;
		return o.end - this.end;
	}
}

public class S1_1263 {

	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());

		int n = Integer.parseInt(st.nextToken());
		Task[] tasks = new Task[n];
		
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			int t = Integer.parseInt(st.nextToken());
			int deadline = Integer.parseInt(st.nextToken());
			tasks[i] = new Task(deadline - t , deadline);
		}
		
		Arrays.sort(tasks);
		
		PriorityQueue<Task> pQ = new PriorityQueue<>();
		boolean flag = true;
		for(Task task : tasks) {
			
			if(pQ.size() < 2) {
				pQ.offer(task);
				continue;
			}else {
				if(task.end <= pQ.peek().start) {
					pQ.poll();
					pQ.offer(task);
				}else {
					flag = false;
					break;
				}
			}
			
		}
		
		if(flag) System.out.println(pQ.peek().start);
		else System.out.println(-1);
	}

}
